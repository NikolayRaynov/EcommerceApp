// <auto-generated />
using System;
using EcommerceApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251020151506_AddProfilePictureVersionProp")]
    partial class AddProfilePictureVersionProp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcommerceApp.Data.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Identifier of the user who owns the cart.");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.CartProduct", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasComment("The Id of the cart to which the product belongs.");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The Id of the product in the cart.");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product in the cart.");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasComment("Name of the category.");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Monitors"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Keyboards"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Games"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Smartphones"
                        });
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.FavoriteProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Identifier of the user who marked the product as favorite.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of the image.");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the product to which the image belongs.");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)")
                        .HasComment("URL of the image.");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the order was placed.");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Shipping address for the order.");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Current status of the order");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The total amount for the order.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Identifier of the user who placed the order.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the parent order to which this item belongs.");

                    b.Property<decimal>("PriceAtTimeOfPurchase")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price of the product at the time of ordering.");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the product in the order item.");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product in the order item.");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the category to which the product belongs.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the product was added.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Description of the product");

                    b.Property<int?>("FavoriteProductId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the favorite product");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)")
                        .HasComment("Image URL for the product");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)")
                        .HasComment("Name of the product");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The selling price of the product");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int")
                        .HasComment("The current stock quantity of the product.");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FavoriteProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2025, 10, 19, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8247),
                            Description = "This is the description for Product 1. It's a high-quality product with excellent features.",
                            Image = "/images/Products/5b36fb0d-8583-4738-b979-ad293a68dcdc.png",
                            Name = "Product Name 1",
                            Price = 12.50m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2025, 10, 18, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8281),
                            Description = "This is the description for Product 2. It's a high-quality product with excellent features.",
                            Image = "/images/Products/b2198310-277a-40a5-bb9d-a0b8dbe986a0.png",
                            Name = "Product Name 2",
                            Price = 15.00m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2025, 10, 17, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8293),
                            Description = "This is the description for Product 3. It's a high-quality product with excellent features.",
                            Image = "/images/Products/7ddb3171-fb56-44cf-b874-5af4242b447a.png",
                            Name = "Product Name 3",
                            Price = 17.50m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedOn = new DateTime(2025, 10, 16, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8426),
                            Description = "This is the description for Product 4. It's a high-quality product with excellent features.",
                            Image = "/images/Products/c014a701-18e8-4c4c-aa80-244fa0f016b3.png",
                            Name = "Product Name 4",
                            Price = 20.00m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CreatedOn = new DateTime(2025, 10, 15, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8440),
                            Description = "This is the description for Product 5. It's a high-quality product with excellent features.",
                            Image = "/images/Products/96b52f1a-50c0-4361-9a4c-b20f497c8557.png",
                            Name = "Product Name 5",
                            Price = 22.50m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2025, 10, 14, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8456),
                            Description = "This is the description for Product 6. It's a high-quality product with excellent features.",
                            Image = "/images/Products/2603f916-65d8-4015-a817-934b7bf496bc.png",
                            Name = "Product Name 6",
                            Price = 25.00m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2025, 10, 13, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8487),
                            Description = "This is the description for Product 7. It's a high-quality product with excellent features.",
                            Image = "/images/Products/c02f90e3-ae51-430d-96ed-70318c4f89ce.png",
                            Name = "Product Name 7",
                            Price = 27.50m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2025, 10, 12, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8499),
                            Description = "This is the description for Product 8. It's a high-quality product with excellent features.",
                            Image = "/images/Products/1ce1ee3a-f137-404b-85fa-a8d9997f34e9.png",
                            Name = "Product Name 8",
                            Price = 30.00m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            CreatedOn = new DateTime(2025, 10, 11, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8510),
                            Description = "This is the description for Product 9. It's a high-quality product with excellent features.",
                            Image = "/images/Products/e85d492c-cb0d-43d3-8d4a-f13c6a8f6ea9.png",
                            Name = "Product Name 9",
                            Price = 32.50m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            CreatedOn = new DateTime(2025, 10, 10, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8528),
                            Description = "This is the description for Product 10. It's a high-quality product with excellent features.",
                            Image = "/images/Products/22f6bb61-ba32-4ce7-bf0d-2cbbddca0871.png",
                            Name = "Product Name 10",
                            Price = 35.00m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2025, 10, 9, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8539),
                            Description = "This is the description for Product 11. It's a high-quality product with excellent features.",
                            Image = "/images/Products/1c9d5e5c-ee9b-4139-82f3-1579919e3661.png",
                            Name = "Product Name 11",
                            Price = 37.50m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2025, 10, 8, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8551),
                            Description = "This is the description for Product 12. It's a high-quality product with excellent features.",
                            Image = "/images/Products/bfa3efed-e3e1-439f-8a35-1cee6db25e4e.png",
                            Name = "Product Name 12",
                            Price = 40.00m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2025, 10, 7, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8562),
                            Description = "This is the description for Product 13. It's a high-quality product with excellent features.",
                            Image = "/images/Products/0e27b698-890c-4759-bc65-2208a307b669.png",
                            Name = "Product Name 13",
                            Price = 42.50m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            CreatedOn = new DateTime(2025, 10, 6, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8573),
                            Description = "This is the description for Product 14. It's a high-quality product with excellent features.",
                            Image = "/images/Products/cdd817ae-da4e-4526-ba52-8450d75cccea.png",
                            Name = "Product Name 14",
                            Price = 45.00m,
                            StockQuantity = 0
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 5,
                            CreatedOn = new DateTime(2025, 10, 5, 15, 15, 3, 779, DateTimeKind.Utc).AddTicks(8688),
                            Description = "This is the description for Product 15. It's a high-quality product with excellent features.",
                            Image = "/images/Products/c5e8770d-dc8d-4f2d-b6d6-7792b8950237.png",
                            Name = "Product Name 15",
                            Price = 47.50m,
                            StockQuantity = 0
                        });
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Comment from the user about the product.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the review was created.");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the product for which the review is written.");

                    b.Property<int>("Rating")
                        .HasColumnType("int")
                        .HasComment("Rating given to the product.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Identifier of the user who wrote the review.");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProfilePictureVersion")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Cart", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("EcommerceApp.Data.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.CartProduct", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceApp.Data.Models.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.FavoriteProduct", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.ApplicationUser", "User")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Image", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Order", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.OrderProduct", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceApp.Data.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Product", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceApp.Data.Models.FavoriteProduct", "FavoriteProduct")
                        .WithMany("Products")
                        .HasForeignKey("FavoriteProductId");

                    b.Navigation("Category");

                    b.Navigation("FavoriteProduct");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Review", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceApp.Data.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.FavoriteProduct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("Images");

                    b.Navigation("OrderProducts");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("FavoriteProducts");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
