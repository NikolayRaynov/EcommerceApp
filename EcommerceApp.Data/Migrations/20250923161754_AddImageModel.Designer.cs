// <auto-generated />
using System;
using EcommerceApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250923161754_AddImageModel")]
    partial class AddImageModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcommerceApp.Data.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Identifier of the user who owns the cart.");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.CartProduct", b =>
                {
                    b.Property<int>("CartId")
                        .HasColumnType("int")
                        .HasComment("The Id of the cart to which the product belongs.");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("The Id of the product in the cart.");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product in the cart.");

                    b.HasKey("CartId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)")
                        .HasComment("Name of the category.");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Monitors"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Keyboards"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Games"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Smartphones"
                        });
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Description of the image.");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the product to which the image belongs.");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)")
                        .HasComment("URL of the image.");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time when the order was placed.");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Shipping address for the order.");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Current status of the order");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The total amount for the order.");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Identifier of the user who placed the order.");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the parent order to which this item belongs.");

                    b.Property<decimal>("PriceAtTimeOfPurchase")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price of the product at the time of ordering.");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the product in the order item.");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the product in the order item.");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Identifier of the category to which the product belongs.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date and time the product was added.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)")
                        .HasComment("Description of the product");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(2083)
                        .HasColumnType("nvarchar(2083)")
                        .HasComment("Image URL for the product");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)")
                        .HasComment("Name of the product");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The selling price of the product");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2025, 9, 22, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(1994),
                            Description = "This is the description for Product 1. It's a high-quality product with excellent features.",
                            Image = "/images/Products/4aaaafb3-a361-4b24-96f1-ffc69314e9bc.png",
                            Name = "Product Name 1",
                            Price = 12.50m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2025, 9, 21, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2030),
                            Description = "This is the description for Product 2. It's a high-quality product with excellent features.",
                            Image = "/images/Products/0a232654-dbb1-4412-8d41-caae319d2c77.png",
                            Name = "Product Name 2",
                            Price = 15.00m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2025, 9, 20, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2040),
                            Description = "This is the description for Product 3. It's a high-quality product with excellent features.",
                            Image = "/images/Products/e2bb73ea-f15c-4b05-9ad6-8c3fe55693f0.png",
                            Name = "Product Name 3",
                            Price = 17.50m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedOn = new DateTime(2025, 9, 19, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2067),
                            Description = "This is the description for Product 4. It's a high-quality product with excellent features.",
                            Image = "/images/Products/28f28930-9800-44df-bcf4-4c396dc2c652.png",
                            Name = "Product Name 4",
                            Price = 20.00m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CreatedOn = new DateTime(2025, 9, 18, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2078),
                            Description = "This is the description for Product 5. It's a high-quality product with excellent features.",
                            Image = "/images/Products/3bc9269d-4067-4e9b-9390-40df5cba342c.png",
                            Name = "Product Name 5",
                            Price = 22.50m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2025, 9, 17, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2093),
                            Description = "This is the description for Product 6. It's a high-quality product with excellent features.",
                            Image = "/images/Products/4e106c2d-79d7-480d-820e-e893d1073a73.png",
                            Name = "Product Name 6",
                            Price = 25.00m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2025, 9, 16, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2103),
                            Description = "This is the description for Product 7. It's a high-quality product with excellent features.",
                            Image = "/images/Products/51e5bf52-b556-48c4-9fc3-24c01ce7247c.png",
                            Name = "Product Name 7",
                            Price = 27.50m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2025, 9, 15, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2114),
                            Description = "This is the description for Product 8. It's a high-quality product with excellent features.",
                            Image = "/images/Products/7693a0c7-c753-4ab5-9e84-5734bbd9b2d0.png",
                            Name = "Product Name 8",
                            Price = 30.00m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            CreatedOn = new DateTime(2025, 9, 14, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2124),
                            Description = "This is the description for Product 9. It's a high-quality product with excellent features.",
                            Image = "/images/Products/c2cda0a3-591a-4e76-9793-ba110dfe096f.png",
                            Name = "Product Name 9",
                            Price = 32.50m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            CreatedOn = new DateTime(2025, 9, 13, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2140),
                            Description = "This is the description for Product 10. It's a high-quality product with excellent features.",
                            Image = "/images/Products/6fe071ba-dffc-49e6-87d1-04cdecd3731c.png",
                            Name = "Product Name 10",
                            Price = 35.00m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CreatedOn = new DateTime(2025, 9, 12, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2292),
                            Description = "This is the description for Product 11. It's a high-quality product with excellent features.",
                            Image = "/images/Products/4331ca90-626c-4b20-99ea-9c3262201de6.png",
                            Name = "Product Name 11",
                            Price = 37.50m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            CreatedOn = new DateTime(2025, 9, 11, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2309),
                            Description = "This is the description for Product 12. It's a high-quality product with excellent features.",
                            Image = "/images/Products/b3b8c3dc-e696-461b-a50e-adb6c299f653.png",
                            Name = "Product Name 12",
                            Price = 40.00m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            CreatedOn = new DateTime(2025, 9, 10, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2319),
                            Description = "This is the description for Product 13. It's a high-quality product with excellent features.",
                            Image = "/images/Products/7baf6c1b-f9ea-4b69-9d77-7c751af0512f.png",
                            Name = "Product Name 13",
                            Price = 42.50m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 4,
                            CreatedOn = new DateTime(2025, 9, 9, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2330),
                            Description = "This is the description for Product 14. It's a high-quality product with excellent features.",
                            Image = "/images/Products/2767ddba-3689-49ea-9c3d-3a660b9cf1e8.png",
                            Name = "Product Name 14",
                            Price = 45.00m
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 5,
                            CreatedOn = new DateTime(2025, 9, 8, 16, 17, 51, 797, DateTimeKind.Utc).AddTicks(2340),
                            Description = "This is the description for Product 15. It's a high-quality product with excellent features.",
                            Image = "/images/Products/a21b71cc-2e11-4704-a7b5-6fd00f279032.png",
                            Name = "Product Name 15",
                            Price = 47.50m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Cart", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("EcommerceApp.Data.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.CartProduct", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.Cart", "Cart")
                        .WithMany("CartProducts")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceApp.Data.Models.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Image", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Order", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.OrderProduct", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceApp.Data.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Product", b =>
                {
                    b.HasOne("EcommerceApp.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("EcommerceApp.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
